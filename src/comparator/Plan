ADDITIONAL TOOLS
- Auto-spell checker:
    - can change easily confused OCR characters 
    - checks spelling against dictionary. If a non-word is 1-2 characters away from a real word, it can change it


CAT TOOL SPECS
- must have: 
    - main window: 
        - segment id
        - Thai - non editable (at first)
        - English - editable
        - when focus is on segment, that triggers TM lookup:
            - when focus changes to segment s, it triggers:
                - comparator(s) which returns matches m
                - then m is given to renderer for TM lookup table
                - need to learn how to:
                    - have dynamically changing table that responds to an event
                    - detect focus events and use accordingly
                    - 
                     
    - TM lookup
        - 
        - Should show every Thai segment that could have a match of a minimum char length
        - These should be listed in order of match length (but first do in order of matches object)
        - Should show the English as well
        - If segment is small, then a shorter min length can be chosen 
          (maybe if it's under 15 char, any match found is shown)
        - maybe make min seg length adjustable?
        - Layout: 
            - search bar at top with min lenght selectable and search button
            - below search bar, have scrollable window with columns
            - columns: 
                - id
                - Thai (match highlighted)
                - English
            - Put columns in scrollable window like Wordfast Pro?
        - 

THINGS TO DO:
    - make Comparator able to read files and be only public class (returns Object arrays for matches) ?
    -
    - make a default file maker for when the return lines don't match up (?)
    - make files readable from text file in Netbeans
    - make script to read Thai legal text and form into file
    - experiment with factories and TMFile:
        - different forms:
            - a basic, default file (parses by line breaks)
            - ** needs separate class type ** corpus (multiple files)
            - a blank file
            - files with different numbers of fields
        - common methods:
            - getAllTMs
            - getNumFields
            - iterable
            - getTM(int index) --> works differently in corpus
            - **addTM(Object[] o) --> not in corpus
            - **addFile(TMFile t) --> only in corpus
            - **addMultipleTM(Object[][] o) --> not in corpus
            - getThai
            - getEng
            - getFileName 
        - Corpus common methods:
            - getTM(int index) --> same as file, but also returns fileName field
            - iterable
            - 
        - Comparator:
            - takes as constructor a String (thai), a Corpus/File, and a minLength
            - upon construction, finds all matches between string and corpus/file that have minimum length specified
            - methods:
                - iterable through TM matches
                - return TMFile of matches
                - getMinLength
                - getThai
        - Display:
            - takes File and displays it correctly, regardless of number of fields
            - may display things differently depending on whether its a comparator derived file (i.e. in TMLookup) or a source file (in main translation window)
    

PROBLEMS WITH WORDFAST:
    - because of segmentation, huge matching areas do not show. 
      We don't know until we translate where exactly we will break up a sentence
      This causes the program to miss huge matches.
      